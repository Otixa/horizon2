--@class ARScene
--@require UIController
--@require Camera
--@require Templater

local mat4 = require("cpml/mat4")
local vec2 = require("cpml/vec2")
local quat = require("cpml/quat")


local Calls = {
    Render = 0,
    ScreenPos = 0,
    GetModel = 0
}

ARObject = function(position, rotation, scale) 
    local this = {}
    this.Position = position or vec3(0, 0, 0)
    this.Scale = scale or vec3(1, 1, 1)
    this.Name = ""
    this.Parent = nil
    this.Children = {}
    this.Content = ""
    this.Style = ""
    this.Color = "red"
    this.IsVisible = false
    this.Up = vec3(0,0,1)
    this.Forward = vec3(0,1,0)
    this.Right = vec3(1,0,0)
    this.Quaternion = quat(0,0,0,1)

    local mat = mat4()
    local cos, sin, acos, sqrt = math.cos, math.sin, math.acos, math.sqrt

    this.AddChild = function(child)
        if child.Parent ~= nil then
            error("Adding child with existing parent. Reparenting not implemented.")
        end
        if child == this then
            error("Attempting to add self as child.")
        end
        child.Parent = this
        table.insert(this.Children, child)
    end

    this.GetScreenPosition = function(camera)

        --system.print("Calc screen pos for "..this.Name)

        local transform = this.GetModel() * { this.Position.x, this.Position.y, this.Position.z, 1 }

        -- local tmp = vec3(transform[1], transform[2], transform[3])
        -- system.print(tostring(tmp))

        local pos = camera.WorldToScreen(transform)
        --local pos = camera.GetMatrix() * transform
        --pos = vec3(pos[1], pos[2], pos[3])
        pos.y = camera.ViewportSize.y-pos.y
        this.ScreenPos = pos
        return pos
    end

    local EulerToQuat = function()
        local cy = math.cos(this.Rotation.z * constants.deg2rad * 0.5);
        local sy = math.sin(this.Rotation.z * constants.deg2rad * 0.5);
        local cp = math.cos(this.Rotation.y * constants.deg2rad * 0.5);
        local sp = math.sin(this.Rotation.y * constants.deg2rad * 0.5);
        local cr = math.cos(this.Rotation.x * constants.deg2rad * 0.5);
        local sr = math.sin(this.Rotation.x * constants.deg2rad * 0.5);
    
        local w = cr * cp * cy + sr * sp * sy;
        local x = sr * cp * cy - cr * sp * sy;
        local y = cr * sp * cy + sr * cp * sy;
        local z = cr * cp * sy - sr * sp * cy;
    
        return quat(x,y,z,w);
    end

    this.LookAt = function(destination)
        local forwardVector = (-destination):normalize();

        local dot = vec3(0,1,0):dot(forwardVector)

        if math.abs(dot - (-1.0)) < 0.000001 then
            return quat(0, 0, 1, 3.1415926535897932)
        end
        if math.abs(dot - (1.0)) < 0.000001 then
            return quat.unit;
        end

        local rotAngle = math.acos(dot);
        local rotAxis = vec3(0,1,0):cross(forwardVector):normalize()
        this.Quaternion = quat.rotate(rotAngle, rotAxis) * this.Quaternion
    end

    this.RotateAround = function(axis, angle)
        this.Quaternion = quat.rotate(angle * constants.deg2rad, axis) * this.Quaternion
    end

    local function to_axis_angle(q)
        if q.w > 1 or q.w < -1 then
            q = q:normalize()
        end
    
        local angle = 2 * acos(q.w)
        local s     = sqrt(1-q.w*q.w)
        local x, y, z = q.x, q.y, q.z
    
        if s >= constants.FLT_EPSILON then
            x = x / s
            y = y / s
            z = z / s
        end
    
        return angle, vec3(x, y, z)
    end

    local function from_transform(t, rot, scale)
        if rot.x == 0 and rot.y == 0 and rot.z == 0 and rot.w == 1 then
            return mat4({
                scale.x, 0, 0, 0,
                0, scale.y, 0, 0,
                0, 0, scale.z, 0,
                t.x, t.y, t.z, 1
            })
        end
        --system.print("!!! Calculating rotations!")
        local angle, axis = to_axis_angle(rot)
        local x, y, z = axis.x, axis.y, axis.z
        local c = cos(angle)
        local s = sin(angle)

        return mat4({
            (x*x*(1-c)+c)*scale.x, (y*x*(1-c)+z*s)*scale.x, (x*z*(1-c)-y*s)*scale.x, 0,
            (x*y*(1-c)-z*s)*scale.y, (y*y*(1-c)+c)*scale.y, (y*z*(1-c)+x*s)*scale.y, 0,
            (x*z*(1-c)+y*s)*scale.z, (y*z*(1-c)-x*s)*scale.z, (z*z*(1-c)+c)*scale.z, 0,
            t.x, t.y, t.z, 1
        })
    end

    local _XformCache = {
        T = vec3(0,0,0),
        R = quat(0,0,0,1),
        S = vec3(1,1,1),
        Last = mat,
        Parent = mat,
        Total = mat
    }
    this.GetModel = function()

        local isDirty = false
        if this.Parent then
            local pMat = this.Parent.GetModel()
            if pMat ~= _XformCache.Parent then
                isDirty = true
                _XformCache.Parent = pMat
            end
        end
        if not (
        this.Position.x == _XformCache.T.x and this.Position.y == _XformCache.T.y and this.Position.z == _XformCache.T.z and
        this.Scale.x == _XformCache.S.x and this.Scale.y == _XformCache.S.y and this.Scale.z == _XformCache.S.z and
        this.Quaternion.x == _XformCache.R.x and this.Quaternion.y == _XformCache.R.y and this.Quaternion.z == _XformCache.R.z and this.Quaternion.w == _XformCache.R.w
        )
        then
            _XformCache.Last = from_transform(this.Position, this.Quaternion, this.Scale)
            _XformCache.T = this.Position:clone()
            _XformCache.R = this.Quaternion:clone()
            _XformCache.S = this.Scale:clone()
            isDirty = true
        end
        renderCount = renderCount + 1

        --system.print("Pass "..renderCount .. " obj: "..this.Name)

        if isDirty then
            _XformCache.Total = _XformCache.Last * _XformCache.Parent
        end
        --system.print("-- End pass")
        return _XformCache.Total
        
        --system.print("!!! CALCULATING MATRIX")

        -- system.print("Position: ".. tostring(this.Position.x == _XformCache.T.x and this.Position.y == _XformCache.T.y and this.Position.z == _XformCache.T.z))
        -- system.print("Rotation: ".. tostring(this.Quaternion.x == _XformCache.R.x and this.Quaternion.y == _XformCache.R.y and this.Quaternion.z == _XformCache.R.z and this.Quaternion.w == _XformCache.R.w))
        -- system.print("Scale: ".. tostring(this.Scale.x == _XformCache.S.x and this.Scale.y == _XformCache.S.y and this.Scale.z == _XformCache.S.z))

        --local xf = from_transform(this.Position, this.Quaternion, this.Scale)

        --if this.Parent then
        --    xf = xf * this.Parent.GetModel()
        --end

        --_XformCache.T = this.Position:clone()
        --_XformCache.R = this.Quaternion:clone()
        --_XformCache.S = this.Scale:clone()
        --_XformCache.Last = xf
        --return xf 
    end

    this.Update = function(deltaTime)
        for i=1,#this.Children do
            local child = this.Children[i]
            child.Update(deltaTime)
        end
    end

    this.Contains = function(point)
        return false
    end

    this.Render = function(camera, deltaTime)
        --system.print("Rendering "..tostring(this.Name))
        this.ScreenPos = this.GetScreenPosition(camera)
        if this.ScreenPos.z >= 0 then
            this.IsVisible = true
        else
            this.IsVisible = false
        end
        local buffer = {}
        for i=1, #this.Children do
            local child = this.Children[i]
            if child._type ~= "vertex" then
                buffer[i] = child.Render(camera, deltaTime)
            end
        end
        if this.IsVisible then
            buffer[#buffer+1] = Templater.Fill(this.Content, this)
        end
        return table.concat(buffer)
    end

    return this
end

ARVertex = function(position, rotation, scale)
    local this = ARObject(position, rotation, scale)
    this._type = "vertex"
    local mat = mat4()
    this.GetModel = function()
        return this.Parent.GetModel()
    end

    this.GetScreenPosition = function(camera)
        local transform = this.Parent.Parent.GetModel() * { this.Position.x, this.Position.y, this.Position.z, 1 }
        local tmp = vec3(transform[1], transform[2], transform[3])
        local pos = camera.WorldToScreen(vec3(transform))
        pos.y = camera.ViewportSize.y-pos.y
        this.ScreenPos = pos
        return pos
    end

    return this
end

ARPoint2D = function(position, rotation, scale)
    local this = ARObject(position, rotation, scale)
    this.Content = [[<circle cx="$(ScreenPos.x)" cy="$(ScreenPos.y)" r="$(Scale:len())" fill="$(Color)" />]]

    this.Contains = function(point)
        if this.ScreenPos == nil then
            return false
        end

        system.print(tostring(point))
        local dx = math.abs(point.x - this.ScreenPos.x)
        local dy = math.abs(point.y - this.ScreenPos.y)
        if dx > this.Scale:len() or dy > this.Scale:len() then
            return false
        end
        return true
    end
    return this
end

ARGroup = function(...) 
    local this = ARObject(position, rotation, scale)
    local arg = {...}

    for i=1,#arg do
        this.AddChild(arg[i])
    end

    this.Render = function(camera, deltaTime)

        local buffer = {}
        for i=1, #this.Children do
            local child = this.Children[i]
            buffer[i] = child.Render(camera, deltaTime)
        end
        return table.concat(buffer)
    end

    return this
end

ARPolygon = function(...)
    local this = ARObject(position, rotation, scale)
    local arg = {...}
    this.Content = [[<polygon points="$(_PolyBuffer)" style="fill:$(Color);$(Style)" />]]
    
    for i=1,#arg do
        this.AddChild(arg[i])
    end

    this.GetBounding2D = function()
        local min = vec2(2^1024,2^1024)
        local max = vec2(0,0)
        -- TODO: null checks
        for i=1,#this.Children do
            local c = this.Children[i].ScreenPos
            if c then
                if c.x < min.x then
                    min.x = c.x
                end
                if c.x > max.x then
                    max.x = c.x
                end
                if c.y < min.y then
                    min.y = c.y
                end
                if c.y > max.y then
                    max.y = c.y
                end
            end
        end
        return min, max
    end

    this.Contains = function(point)
        if not this.ContainsInBounds(point) then
            return false
        end
        local oddNodes = false
        local j = #this.Children
        for i = 1, #this.Children do
            local iScreen = this.Children[i].ScreenPos
            local jScreen = this.Children[j].ScreenPos
            if (iScreen.y < point.y and jScreen.y >= point.y or jScreen.y < point.y and iScreen.y >= point.y) then
                if (iScreen.x + ( point.y - iScreen.y ) / (jScreen.y - iScreen.y) * (jScreen.x - iScreen.x) < point.x) then
                    oddNodes = not oddNodes;
                end
            end
            j = i;
        end
        return oddNodes
    end

    this.ContainsInBounds = function(point)
        local min, max = this.GetBounding2D()
        if 
            point.x >= min.x and point.x <= max.x and 
            point.y >= min.y and point.y <= max.y 
        then
            return true
        end
        return false
    end

    local mat = mat4()
    this.GetModel = function()
        return this.Parent.GetModel()
    end

    local baseRender = this.Render
    this.Render = function(camera, deltaTime)
        system.print("Rendering "..tostring(this.Name))
        this._PolyBuffer = {}
        for i=1,#this.Children do
            local c = this.Children[i]
            local pos = camera.WorldToScreen(this.Parent.GetModel() * { c.Position.x, c.Position.y, c.Position.z, 1 })
            if pos.z > 0 then
                this._PolyBuffer[i] = pos.x..","..pos.y.." "
            end
        end
        --this._PolyBuffer = table.concat(this._PolyBuffer)
        return string.format([[<polygon points="%s" style="fill:%s;%s"/>]], table.concat(this._PolyBuffer), this.Color, this.Style)
        --return Templater.Fill(this.Content, this)
        --return baseRender(camera, deltaTime)
    end

    return this
end

ARLine = function(p1, p2)
    local this = ARGroup(position, rotation, scale)
    this.P1 = p1 or ARObject()
    this.P2 = p2 or ARObject(vec3(0,0,1))
    this.Content = [[<line x1="$(P1Pos.x)" y1="$(P1Pos.y)" x2="$(P2Pos.x)" y2="$(P2Pos.y)" style="stroke:rgb(255,0,0);stroke-width:2" />]]
    this.AddChild(this.P1)
    this.AddChild(this.P2)

    this.Render = function(camera, deltaTime)
        this.P1Pos = this.P1.GetScreenPosition(camera)
        this.P2Pos = this.P2.GetScreenPosition(camera)
        local buffer = ""
        for i=1, #this.Children do
            buffer = buffer .. this.Children[i].Render(camera)
        end
        if this.P1.IsVisible and this.P2.IsVisible then
            buffer = buffer .. Templater.Fill(this.Content, this)
        end
        return buffer
    end

    return this
end

-- billboard
-- mesh
-- textured mesh?

ARScene = (function()
    local this = HorizonModule("AR Scene", "Augmented Reality Renderer", "PreUpdate", true, 0)
    this.Tags = "hud,ar"
    this.Config = {
    }
    this.Config.Version = "%GIT_FILE_LAST_COMMIT%"
    this.Objects = {}

    local lastTime = system.getTime()
    local static = Horizon.Memory.Static
    local hud = Horizon.GetModule("UI Controller").Displays[1]
    local cursor = Horizon.GetModule("HUD Cursor")
    local resolution = vec2(system.getScreenWidth(), system.getScreenHeight())
    local camera = Camera(resolution, system.getFov())
    camera.ViewportSize = vec2(camera.Resolution.x, camera.Resolution.y)

    local layer = UIPanel(0, 0, 100, 100)
    layer.AlwaysDirty = true
    hud.AddWidget(layer)

    -- Test bullshit
    local plr = vec3(Horizon.Controller.getMasterPlayerWorldPosition())
    local offset = static.World.Vertical * -0.625
    local startPos = vec3(-3694.171, 95670.455, -44290.861) - offset
    local endPos = vec3(-3694.119, 95669.155, -44289.342) - offset
    local rightAxis = endPos - startPos
    local forwardAxis = rightAxis:cross(static.World.Vertical):normalize() * 4
    
    local sortObjects = function()
        table.sort(this.Objects, function(a, b)
            if a.ScreenPos and b.ScreenPos then
                return a.ScreenPos.z > b.ScreenPos.z
            end
        end)
    end

    this.AddObject = function(object)
        table.insert(this.Objects, object)
        sortObjects()
    end

    this.RemoveObject = function(object)
        for i = 1, #this.Objects do
            if this.Objects[i] == object then
                table.remove(this.Objects, i)
                return true
            end
        end
        return false
    end

    this.GetMousePosition = function()
        local mousePos = hud.MousePos * 0.01
        if cursor and cursor.Cursor.Enabled then
            mousePos.x = mousePos.x * camera.ViewportSize.x
            mousePos.y = mousePos.y * camera.ViewportSize.y
        else
            mousePos.x = camera.ViewportSize.x * 0.5
            mousePos.y = camera.ViewportSize.y * 0.5
        end
        return mousePos
    end

    local poly = ARPolygon(
        ARVertex(),
        ARVertex(vec3(0,0,1)),
        ARVertex(vec3(0,0,1) + (-vec3(1,0,0) * 0.5)),
        ARVertex((vec3(0,0,1) * 2.5) + (vec3(1,0,0) * 0.5)),
        ARVertex(vec3(0,0,1) + (vec3(1,0,0) * 1.5)),
        ARVertex(vec3(0,0,1) + vec3(1,0,0)),
        ARVertex(vec3(1,0,0))
    )
    poly.Position = vec3(-0.5,0,0)
    poly.RotateAround(vec3(0,0,1), 90)
    poly.Scale = poly.Scale * rightAxis:len()
    poly.Style = "opacity:0.5"
    --poly.Quaternion = poly.Quaternion * quat.from_direction(forwardAxis:normalize(), -static.World.Vertical)
    poly.LookAt(rightAxis:normalize())
    poly.Update = function(deltaTime)
        --poly.RotateAround(static.World.Vertical, deltaTime * 90)
        --poly.Rotation.z = (poly.Rotation.z + (deltaTime * 90)) % 360
        --poly.Scale.z = (poly.Scale.z + (deltaTime * 2)) % 3
        if poly.Contains(this.GetMousePosition()) then
            poly.Color = "green"
        else
            poly.Color = "red"
        end
    end
    local grp = ARGroup(poly)
    grp.Position = startPos + (rightAxis * 0.5)
    --this.AddObject(grp)

    this.ObjectFromS3D = function(input)
        local function split(s, delimiter)
            idx = 1
            result = {}
            for match in (s..delimiter):gmatch("(.-)"..delimiter) do
                result[idx] = match
                idx = idx + 1
            end
            return result
        end
        local group = ARGroup()
        group.Name = "Mesh"
        
        local coords = {}
        if type(input) == "table" then
            coords = input
        else
            coords = split(string, ",")
        end
        local n = #coords
        for i = 1, n, 9 do
            local p1 = vec3(coords[i], coords[i+1], coords[i+2])
            local p2 = vec3(coords[i+3], coords[i+4], coords[i+5])
            local p3 = vec3(coords[i+6], coords[i+7], coords[i+8])

            local v1 = ARVertex(p1)
            local v2 = ARVertex(p2)
            local v3 = ARVertex(p3)

            local polygon = ARPolygon(v1,v2,v3)
            polygon.Name = "Poly "..math.ceil(i/9)
            system.print("Created " .. polygon.Name)

            polygon.Style = "opacity:0.4;stroke:#ffffff66;"
            polygon.Color = "#ffffff55"
            group.AddChild(polygon)
        end
        return group
    end

    local test20 = [[0 0 1,0.89 0 0.45,0.28 0.85 0.45,0 0 1,0.28 0.85 0.45,-0.72 0.53 0.45,0 0 1,-0.72 0.53 0.45,-0.72 -0.53 0.45,0 0 1,-0.72 -0.53 0.45,0.28 -0.85 0.45,0 0 1,0.28 -0.85 0.45,0.89 0 0.45,0.89 0 0.45,0.72 -0.53 -0.45,0.72 0.53 -0.45,0.28 0.85 0.45,0.72 0.53 -0.45,-0.28 0.85 -0.45,-0.72 0.53 0.45,-0.28 0.85 -0.45,-0.89 0 -0.45,-0.72 -0.53 0.45,-0.89 0 -0.45,-0.28 -0.85 -0.45,0.28 -0.85 0.45,-0.28 -0.85 -0.45,0.72 -0.53 -0.45,0.72 0.53 -0.45,0.28 0.85 0.45,0.89 0 0.45,-0.28 0.85 -0.45,-0.72 0.53 0.45,0.28 0.85 0.45,-0.89 0 -0.45,-0.72 -0.53 0.45,-0.72 0.53 0.45,-0.28 -0.85 -0.45,0.28 -0.85 0.45,-0.72 -0.53 0.45,0.72 -0.53 -0.45,0.89 0 0.45,0.28 -0.85 0.45,0 0 -1,-0.28 0.85 -0.45,0.72 0.53 -0.45,0 0 -1,-0.89 0 -0.45,-0.28 0.85 -0.45,0 0 -1,-0.28 -0.85 -0.45,-0.89 0 -0.45,0 0 -1,0.72 -0.53 -0.45,-0.28 -0.85 -0.45,0 0 -1,0.72 0.53 -0.45,0.72 -0.53 -0.45]]
    local test64 = [[0 0 1,0.46 0 0.89,-0.23 0.4 0.89,0.46 0 0.89,0.82 0 0.58,0.29 0.5 0.82,0.46 0 0.89,0.29 0.5 0.82,-0.23 0.4 0.89,-0.23 0.4 0.89,0.29 0.5 0.82,-0.41 0.71 0.58,0.82 0 0.58,0.99 0 0.14,0.75 0.62 0.25,0.82 0 0.58,0.75 0.62 0.25,0.29 0.5 0.82,0.29 0.5 0.82,0.75 0.62 0.25,0.16 0.95 0.25,0.29 0.5 0.82,0.16 0.95 0.25,-0.41 0.71 0.58,-0.41 0.71 0.58,0.16 0.95 0.25,-0.5 0.86 0.14,0.99 0 0.14,0.94 0 -0.33,0.76 0.4 -0.51,0.99 0 0.14,0.76 0.4 -0.51,0.75 0.62 0.25,0.75 0.62 0.25,0.76 0.4 -0.51,0.41 0.71 -0.58,0.75 0.62 0.25,0.41 0.71 -0.58,0.16 0.95 0.25,0.16 0.95 0.25,0.41 0.71 -0.58,-0.04 0.86 -0.51,0.16 0.95 0.25,-0.04 0.86 -0.51,-0.5 0.86 0.14,-0.5 0.86 0.14,-0.04 0.86 -0.51,-0.47 0.82 -0.33,0 0 1,-0.23 0.4 0.89,-0.23 -0.4 0.89,-0.23 0.4 0.89,-0.41 0.71 0.58,-0.58 0 0.82,-0.23 0.4 0.89,-0.58 0 0.82,-0.23 -0.4 0.89,-0.23 -0.4 0.89,-0.58 0 0.82,-0.41 -0.71 0.58,-0.41 0.71 0.58,-0.5 0.86 0.14,-0.91 0.34 0.25,-0.41 0.71 0.58,-0.91 0.34 0.25,-0.58 0 0.82,-0.58 0 0.82,-0.91 0.34 0.25,-0.91 -0.34 0.25,-0.58 0 0.82,-0.91 -0.34 0.25,-0.41 -0.71 0.58,-0.41 -0.71 0.58,-0.91 -0.34 0.25,-0.5 -0.86 0.14,-0.5 0.86 0.14,-0.47 0.82 -0.33,-0.73 0.46 -0.51,-0.5 0.86 0.14,-0.73 0.46 -0.51,-0.91 0.34 0.25,-0.91 0.34 0.25,-0.73 0.46 -0.51,-0.82 0 -0.58,-0.91 0.34 0.25,-0.82 0 -0.58,-0.91 -0.34 0.25,-0.91 -0.34 0.25,-0.82 0 -0.58,-0.73 -0.46 -0.51,-0.91 -0.34 0.25,-0.73 -0.46 -0.51,-0.5 -0.86 0.14,-0.5 -0.86 0.14,-0.73 -0.46 -0.51,-0.47 -0.82 -0.33,0 0 1,-0.23 -0.4 0.89,0.46 0 0.89,-0.23 -0.4 0.89,-0.41 -0.71 0.58,0.29 -0.5 0.82,-0.23 -0.4 0.89,0.29 -0.5 0.82,0.46 0 0.89,0.46 0 0.89,0.29 -0.5 0.82,0.82 0 0.58,-0.41 -0.71 0.58,-0.5 -0.86 0.14,0.16 -0.95 0.25,-0.41 -0.71 0.58,0.16 -0.95 0.25,0.29 -0.5 0.82,0.29 -0.5 0.82,0.16 -0.95 0.25,0.75 -0.62 0.25,0.29 -0.5 0.82,0.75 -0.62 0.25,0.82 0 0.58,0.82 0 0.58,0.75 -0.62 0.25,0.99 0 0.14,-0.5 -0.86 0.14,-0.47 -0.82 -0.33,-0.04 -0.86 -0.51,-0.5 -0.86 0.14,-0.04 -0.86 -0.51,0.16 -0.95 0.25,0.16 -0.95 0.25,-0.04 -0.86 -0.51,0.41 -0.71 -0.58,0.16 -0.95 0.25,0.41 -0.71 -0.58,0.75 -0.62 0.25,0.75 -0.62 0.25,0.41 -0.71 -0.58,0.76 -0.4 -0.51,0.75 -0.62 0.25,0.76 -0.4 -0.51,0.99 0 0.14,0.99 0 0.14,0.76 -0.4 -0.51,0.94 0 -0.33,0.94 0 -0.33,0.76 -0.4 -0.51,0.76 0.4 -0.51,0.76 -0.4 -0.51,0.41 -0.71 -0.58,0.58 0 -0.82,0.76 -0.4 -0.51,0.58 0 -0.82,0.76 0.4 -0.51,0.76 0.4 -0.51,0.58 0 -0.82,0.41 0.71 -0.58,0.41 -0.71 -0.58,-0.04 -0.86 -0.51,-0.07 -0.34 -0.94,0.41 -0.71 -0.58,-0.07 -0.34 -0.94,0.58 0 -0.82,0.58 0 -0.82,-0.07 -0.34 -0.94,-0.07 0.34 -0.94,0.58 0 -0.82,-0.07 0.34 -0.94,0.41 0.71 -0.58,0.41 0.71 -0.58,-0.07 0.34 -0.94,-0.04 0.86 -0.51,-0.04 -0.86 -0.51,-0.47 -0.82 -0.33,-0.73 -0.46 -0.51,-0.04 -0.86 -0.51,-0.73 -0.46 -0.51,-0.07 -0.34 -0.94,-0.07 -0.34 -0.94,-0.73 -0.46 -0.51,-0.82 0 -0.58,-0.07 -0.34 -0.94,-0.82 0 -0.58,-0.07 0.34 -0.94,-0.07 0.34 -0.94,-0.82 0 -0.58,-0.73 0.46 -0.51,-0.07 0.34 -0.94,-0.73 0.46 -0.51,-0.04 0.86 -0.51,-0.04 0.86 -0.51,-0.73 0.46 -0.51,-0.47 0.82 -0.33]]
    local test72 = [[0 0 1,0.5 0 0.87,0 0.5 0.87,0.5 0 0.87,0.87 0 0.5,0.55 0.55 0.63,0.5 0 0.87,0.55 0.55 0.63,0 0.5 0.87,0 0.5 0.87,0.55 0.55 0.63,0 0.87 0.5,0.87 0 0.5,1 0 0,0.87 0.5 0,0.87 0 0.5,0.87 0.5 0,0.55 0.55 0.63,0.55 0.55 0.63,0.87 0.5 0,0.5 0.87 0,0.55 0.55 0.63,0.5 0.87 0,0 0.87 0.5,0 0.87 0.5,0.5 0.87 0,0 1 0,0 0 1,0 0.5 0.87,-0.5 0 0.87,0 0.5 0.87,0 0.87 0.5,-0.55 0.55 0.63,0 0.5 0.87,-0.55 0.55 0.63,-0.5 0 0.87,-0.5 0 0.87,-0.55 0.55 0.63,-0.87 0 0.5,0 0.87 0.5,0 1 0,-0.5 0.87 0,0 0.87 0.5,-0.5 0.87 0,-0.55 0.55 0.63,-0.55 0.55 0.63,-0.5 0.87 0,-0.87 0.5 0,-0.55 0.55 0.63,-0.87 0.5 0,-0.87 0 0.5,-0.87 0 0.5,-0.87 0.5 0,-1 0 0,0 0 1,-0.5 0 0.87,0 -0.5 0.87,-0.5 0 0.87,-0.87 0 0.5,-0.55 -0.55 0.63,-0.5 0 0.87,-0.55 -0.55 0.63,0 -0.5 0.87,0 -0.5 0.87,-0.55 -0.55 0.63,0 -0.87 0.5,-0.87 0 0.5,-1 0 0,-0.87 -0.5 0,-0.87 0 0.5,-0.87 -0.5 0,-0.55 -0.55 0.63,-0.55 -0.55 0.63,-0.87 -0.5 0,-0.5 -0.87 0,-0.55 -0.55 0.63,-0.5 -0.87 0,0 -0.87 0.5,0 -0.87 0.5,-0.5 -0.87 0,0 -1 0,0 0 1,0 -0.5 0.87,0.5 0 0.87,0 -0.5 0.87,0 -0.87 0.5,0.55 -0.55 0.63,0 -0.5 0.87,0.55 -0.55 0.63,0.5 0 0.87,0.5 0 0.87,0.55 -0.55 0.63,0.87 0 0.5,0 -0.87 0.5,0 -1 0,0.5 -0.87 0,0 -0.87 0.5,0.5 -0.87 0,0.55 -0.55 0.63,0.55 -0.55 0.63,0.5 -0.87 0,0.87 -0.5 0,0.55 -0.55 0.63,0.87 -0.5 0,0.87 0 0.5,0.87 0 0.5,0.87 -0.5 0,1 0 0,0 0 -1,0 0.5 -0.87,0.5 0 -0.87,0 0.5 -0.87,0 0.87 -0.5,0.55 0.55 -0.63,0 0.5 -0.87,0.55 0.55 -0.63,0.5 0 -0.87,0.5 0 -0.87,0.55 0.55 -0.63,0.87 0 -0.5,0 0.87 -0.5,0 1 0,0.5 0.87 0,0 0.87 -0.5,0.5 0.87 0,0.55 0.55 -0.63,0.55 0.55 -0.63,0.5 0.87 0,0.87 0.5 0,0.55 0.55 -0.63,0.87 0.5 0,0.87 0 -0.5,0.87 0 -0.5,0.87 0.5 0,1 0 0,0 0 -1,-0.5 0 -0.87,0 0.5 -0.87,-0.5 0 -0.87,-0.87 0 -0.5,-0.55 0.55 -0.63,-0.5 0 -0.87,-0.55 0.55 -0.63,0 0.5 -0.87,0 0.5 -0.87,-0.55 0.55 -0.63,0 0.87 -0.5,-0.87 0 -0.5,-1 0 0,-0.87 0.5 0,-0.87 0 -0.5,-0.87 0.5 0,-0.55 0.55 -0.63,-0.55 0.55 -0.63,-0.87 0.5 0,-0.5 0.87 0,-0.55 0.55 -0.63,-0.5 0.87 0,0 0.87 -0.5,0 0.87 -0.5,-0.5 0.87 0,0 1 0,0 0 -1,0 -0.5 -0.87,-0.5 0 -0.87,0 -0.5 -0.87,0 -0.87 -0.5,-0.55 -0.55 -0.63,0 -0.5 -0.87,-0.55 -0.55 -0.63,-0.5 0 -0.87,-0.5 0 -0.87,-0.55 -0.55 -0.63,-0.87 0 -0.5,0 -0.87 -0.5,0 -1 0,-0.5 -0.87 0,0 -0.87 -0.5,-0.5 -0.87 0,-0.55 -0.55 -0.63,-0.55 -0.55 -0.63,-0.5 -0.87 0,-0.87 -0.5 0,-0.55 -0.55 -0.63,-0.87 -0.5 0,-0.87 0 -0.5,-0.87 0 -0.5,-0.87 -0.5 0,-1 0 0,0 0 -1,0.5 0 -0.87,0 -0.5 -0.87,0.5 0 -0.87,0.87 0 -0.5,0.55 -0.55 -0.63,0.5 0 -0.87,0.55 -0.55 -0.63,0 -0.5 -0.87,0 -0.5 -0.87,0.55 -0.55 -0.63,0 -0.87 -0.5,0.87 0 -0.5,1 0 0,0.87 -0.5 0,0.87 0 -0.5,0.87 -0.5 0,0.55 -0.55 -0.63,0.55 -0.55 -0.63,0.87 -0.5 0,0.5 -0.87 0,0.55 -0.55 -0.63,0.5 -0.87 0,0 -0.87 -0.5,0 -0.87 -0.5,0.5 -0.87 0,0 -1 0]]
    -- v2
    local test80 = {0,0,1,0.53,0,0.85,0.16,0.5,0.85,0.53,0,0.85,0.89,0,0.45,0.69,0.5,0.53,0.53,0,0.85,0.69,0.5,0.53,0.16,0.5,0.85,0.16,0.5,0.85,0.69,0.5,0.53,0.28,0.85,0.45,0,0,1,0.16,0.5,0.85,-0.43,0.31,0.85,0.16,0.5,0.85,0.28,0.85,0.45,-0.26,0.81,0.53,0.16,0.5,0.85,-0.26,0.81,0.53,-0.43,0.31,0.85,-0.43,0.31,0.85,-0.26,0.81,0.53,-0.72,0.53,0.45,0,0,1,-0.43,0.31,0.85,-0.43,-0.31,0.85,-0.43,0.31,0.85,-0.72,0.53,0.45,-0.85,0,0.53,-0.43,0.31,0.85,-0.85,0,0.53,-0.43,-0.31,0.85,-0.43,-0.31,0.85,-0.85,0,0.53,-0.72,-0.53,0.45,0,0,1,-0.43,-0.31,0.85,0.16,-0.5,0.85,-0.43,-0.31,0.85,-0.72,-0.53,0.45,-0.26,-0.81,0.53,-0.43,-0.31,0.85,-0.26,-0.81,0.53,0.16,-0.5,0.85,0.16,-0.5,0.85,-0.26,-0.81,0.53,0.28,-0.85,0.45,0,0,1,0.16,-0.5,0.85,0.53,0,0.85,0.16,-0.5,0.85,0.28,-0.85,0.45,0.69,-0.5,0.53,0.16,-0.5,0.85,0.69,-0.5,0.53,0.53,0,0.85,0.53,0,0.85,0.69,-0.5,0.53,0.89,0,0.45,0.89,0,0.45,0.95,-0.31,0,0.95,0.31,0,0.95,-0.31,0,0.72,-0.53,-0.45,0.85,0,-0.53,0.95,-0.31,0,0.85,0,-0.53,0.95,0.31,0,0.95,0.31,0,0.85,0,-0.53,0.72,0.53,-0.45,0.28,0.85,0.45,0.59,0.81,0,0,1,0,0.59,0.81,0,0.72,0.53,-0.45,0.26,0.81,-0.53,0.59,0.81,0,0.26,0.81,-0.53,0,1,0,0,1,0,0.26,0.81,-0.53,-0.28,0.85,-0.45,-0.72,0.53,0.45,-0.59,0.81,0,-0.95,0.31,0,-0.59,0.81,0,-0.28,0.85,-0.45,-0.69,0.5,-0.53,-0.59,0.81,0,-0.69,0.5,-0.53,-0.95,0.31,0,-0.95,0.31,0,-0.69,0.5,-0.53,-0.89,0,-0.45,-0.72,-0.53,0.45,-0.95,-0.31,0,-0.59,-0.81,0,-0.95,-0.31,0,-0.89,0,-0.45,-0.69,-0.5,-0.53,-0.95,-0.31,0,-0.69,-0.5,-0.53,-0.59,-0.81,0,-0.59,-0.81,0,-0.69,-0.5,-0.53,-0.28,-0.85,-0.45,0.28,-0.85,0.45,0,-1,0,0.59,-0.81,0,0,-1,0,-0.28,-0.85,-0.45,0.26,-0.81,-0.53,0,-1,0,0.26,-0.81,-0.53,0.59,-0.81,0,0.59,-0.81,0,0.26,-0.81,-0.53,0.72,-0.53,-0.45,0.72,0.53,-0.45,0.59,0.81,0,0.95,0.31,0,0.59,0.81,0,0.28,0.85,0.45,0.69,0.5,0.53,0.59,0.81,0,0.69,0.5,0.53,0.95,0.31,0,0.95,0.31,0,0.69,0.5,0.53,0.89,0,0.45,-0.28,0.85,-0.45,-0.59,0.81,0,0,1,0,-0.59,0.81,0,-0.72,0.53,0.45,-0.26,0.81,0.53,-0.59,0.81,0,-0.26,0.81,0.53,0,1,0,0,1,0,-0.26,0.81,0.53,0.28,0.85,0.45,-0.89,0,-0.45,-0.95,-0.31,0,-0.95,0.31,0,-0.95,-0.31,0,-0.72,-0.53,0.45,-0.85,0,0.53,-0.95,-0.31,0,-0.85,0,0.53,-0.95,0.31,0,-0.95,0.31,0,-0.85,0,0.53,-0.72,0.53,0.45,-0.28,-0.85,-0.45,0,-1,0,-0.59,-0.81,0,0,-1,0,0.28,-0.85,0.45,-0.26,-0.81,0.53,0,-1,0,-0.26,-0.81,0.53,-0.59,-0.81,0,-0.59,-0.81,0,-0.26,-0.81,0.53,-0.72,-0.53,0.45,0.72,-0.53,-0.45,0.95,-0.31,0,0.59,-0.81,0,0.95,-0.31,0,0.89,0,0.45,0.69,-0.5,0.53,0.95,-0.31,0,0.69,-0.5,0.53,0.59,-0.81,0,0.59,-0.81,0,0.69,-0.5,0.53,0.28,-0.85,0.45,0,0,-1,-0.16,0.5,-0.85,0.43,0.31,-0.85,-0.16,0.5,-0.85,-0.28,0.85,-0.45,0.26,0.81,-0.53,-0.16,0.5,-0.85,0.26,0.81,-0.53,0.43,0.31,-0.85,0.43,0.31,-0.85,0.26,0.81,-0.53,0.72,0.53,-0.45,0,0,-1,-0.53,0,-0.85,-0.16,0.5,-0.85,-0.53,0,-0.85,-0.89,0,-0.45,-0.69,0.5,-0.53,-0.53,0,-0.85,-0.69,0.5,-0.53,-0.16,0.5,-0.85,-0.16,0.5,-0.85,-0.69,0.5,-0.53,-0.28,0.85,-0.45,0,0,-1,-0.16,-0.5,-0.85,-0.53,0,-0.85,-0.16,-0.5,-0.85,-0.28,-0.85,-0.45,-0.69,-0.5,-0.53,-0.16,-0.5,-0.85,-0.69,-0.5,-0.53,-0.53,0,-0.85,-0.53,0,-0.85,-0.69,-0.5,-0.53,-0.89,0,-0.45,0,0,-1,0.43,-0.31,-0.85,-0.16,-0.5,-0.85,0.43,-0.31,-0.85,0.72,-0.53,-0.45,0.26,-0.81,-0.53,0.43,-0.31,-0.85,0.26,-0.81,-0.53,-0.16,-0.5,-0.85,-0.16,-0.5,-0.85,0.26,-0.81,-0.53,-0.28,-0.85,-0.45,0,0,-1,0.43,0.31,-0.85,0.43,-0.31,-0.85,0.43,0.31,-0.85,0.72,0.53,-0.45,0.85,0,-0.53,0.43,0.31,-0.85,0.85,0,-0.53,0.43,-0.31,-0.85,0.43,-0.31,-0.85,0.85,0,-0.53,0.72,-0.53,-0.45}
    local test100 = {0,0,1,0.37,0,0.93,-0.19,0.32,0.93,0.37,0,0.93,0.69,0,0.72,0.22,0.37,0.9,0.37,0,0.93,0.22,0.37,0.9,-0.19,0.32,0.93,-0.19,0.32,0.93,0.22,0.37,0.9,-0.35,0.6,0.72,0.69,0,0.72,0.91,0,0.41,0.61,0.46,0.64,0.69,0,0.72,0.61,0.46,0.64,0.22,0.37,0.9,0.22,0.37,0.9,0.61,0.46,0.64,0.1,0.76,0.64,0.22,0.37,0.9,0.1,0.76,0.64,-0.35,0.6,0.72,-0.35,0.6,0.72,0.1,0.76,0.64,-0.46,0.79,0.41,0.91,0,0.41,1,0,0.04,0.86,0.5,0.07,0.91,0,0.41,0.86,0.5,0.07,0.61,0.46,0.64,0.61,0.46,0.64,0.86,0.5,0.07,0.5,0.86,0.08,0.61,0.46,0.64,0.5,0.86,0.08,0.1,0.76,0.64,0.1,0.76,0.64,0.5,0.86,0.08,0,1,0.07,0.1,0.76,0.64,0,1,0.07,-0.46,0.79,0.41,-0.46,0.79,0.41,0,1,0.07,-0.5,0.87,0.04,1,0,0.04,0.94,0,-0.33,0.81,0.32,-0.49,1,0,0.04,0.81,0.32,-0.49,0.86,0.5,0.07,0.86,0.5,0.07,0.81,0.32,-0.49,0.57,0.6,-0.57,0.86,0.5,0.07,0.57,0.6,-0.57,0.5,0.86,0.08,0.5,0.86,0.08,0.57,0.6,-0.57,0.24,0.79,-0.57,0.5,0.86,0.08,0.24,0.79,-0.57,0,1,0.07,0,1,0.07,0.24,0.79,-0.57,-0.13,0.87,-0.49,0,1,0.07,-0.13,0.87,-0.49,-0.5,0.87,0.04,-0.5,0.87,0.04,-0.13,0.87,-0.49,-0.47,0.82,-0.33,0,0,1,-0.19,0.32,0.93,-0.19,-0.32,0.93,-0.19,0.32,0.93,-0.35,0.6,0.72,-0.43,0,0.9,-0.19,0.32,0.93,-0.43,0,0.9,-0.19,-0.32,0.93,-0.19,-0.32,0.93,-0.43,0,0.9,-0.35,-0.6,0.72,-0.35,0.6,0.72,-0.46,0.79,0.41,-0.71,0.3,0.64,-0.35,0.6,0.72,-0.71,0.3,0.64,-0.43,0,0.9,-0.43,0,0.9,-0.71,0.3,0.64,-0.71,-0.3,0.64,-0.43,0,0.9,-0.71,-0.3,0.64,-0.35,-0.6,0.72,-0.35,-0.6,0.72,-0.71,-0.3,0.64,-0.46,-0.79,0.41,-0.46,0.79,0.41,-0.5,0.87,0.04,-0.86,0.5,0.07,-0.46,0.79,0.41,-0.86,0.5,0.07,-0.71,0.3,0.64,-0.71,0.3,0.64,-0.86,0.5,0.07,-1,0,0.08,-0.71,0.3,0.64,-1,0,0.08,-0.71,-0.3,0.64,-0.71,-0.3,0.64,-1,0,0.08,-0.86,-0.5,0.07,-0.71,-0.3,0.64,-0.86,-0.5,0.07,-0.46,-0.79,0.41,-0.46,-0.79,0.41,-0.86,-0.5,0.07,-0.5,-0.87,0.04,-0.5,0.87,0.04,-0.47,0.82,-0.33,-0.69,0.54,-0.49,-0.5,0.87,0.04,-0.69,0.54,-0.49,-0.86,0.5,0.07,-0.86,0.5,0.07,-0.69,0.54,-0.49,-0.8,0.19,-0.57,-0.86,0.5,0.07,-0.8,0.19,-0.57,-1,0,0.08,-1,0,0.08,-0.8,0.19,-0.57,-0.8,-0.19,-0.57,-1,0,0.08,-0.8,-0.19,-0.57,-0.86,-0.5,0.07,-0.86,-0.5,0.07,-0.8,-0.19,-0.57,-0.69,-0.54,-0.49,-0.86,-0.5,0.07,-0.69,-0.54,-0.49,-0.5,-0.87,0.04,-0.5,-0.87,0.04,-0.69,-0.54,-0.49,-0.47,-0.82,-0.33,0,0,1,-0.19,-0.32,0.93,0.37,0,0.93,-0.19,-0.32,0.93,-0.35,-0.6,0.72,0.22,-0.37,0.9,-0.19,-0.32,0.93,0.22,-0.37,0.9,0.37,0,0.93,0.37,0,0.93,0.22,-0.37,0.9,0.69,0,0.72,-0.35,-0.6,0.72,-0.46,-0.79,0.41,0.1,-0.76,0.64,-0.35,-0.6,0.72,0.1,-0.76,0.64,0.22,-0.37,0.9,0.22,-0.37,0.9,0.1,-0.76,0.64,0.61,-0.46,0.64,0.22,-0.37,0.9,0.61,-0.46,0.64,0.69,0,0.72,0.69,0,0.72,0.61,-0.46,0.64,0.91,0,0.41,-0.46,-0.79,0.41,-0.5,-0.87,0.04,0,-1,0.07,-0.46,-0.79,0.41,0,-1,0.07,0.1,-0.76,0.64,0.1,-0.76,0.64,0,-1,0.07,0.5,-0.86,0.08,0.1,-0.76,0.64,0.5,-0.86,0.08,0.61,-0.46,0.64,0.61,-0.46,0.64,0.5,-0.86,0.08,0.86,-0.5,0.07,0.61,-0.46,0.64,0.86,-0.5,0.07,0.91,0,0.41,0.91,0,0.41,0.86,-0.5,0.07,1,0,0.04,-0.5,-0.87,0.04,-0.47,-0.82,-0.33,-0.13,-0.87,-0.49,-0.5,-0.87,0.04,-0.13,-0.87,-0.49,0,-1,0.07,0,-1,0.07,-0.13,-0.87,-0.49,0.24,-0.79,-0.57,0,-1,0.07,0.24,-0.79,-0.57,0.5,-0.86,0.08,0.5,-0.86,0.08,0.24,-0.79,-0.57,0.57,-0.6,-0.57,0.5,-0.86,0.08,0.57,-0.6,-0.57,0.86,-0.5,0.07,0.86,-0.5,0.07,0.57,-0.6,-0.57,0.81,-0.32,-0.49,0.86,-0.5,0.07,0.81,-0.32,-0.49,1,0,0.04,1,0,0.04,0.81,-0.32,-0.49,0.94,0,-0.33,0.94,0,-0.33,0.81,-0.32,-0.49,0.81,0.32,-0.49,0.81,-0.32,-0.49,0.57,-0.6,-0.57,0.71,0,-0.71,0.81,-0.32,-0.49,0.71,0,-0.71,0.81,0.32,-0.49,0.81,0.32,-0.49,0.71,0,-0.71,0.57,0.6,-0.57,0.57,-0.6,-0.57,0.24,-0.79,-0.57,0.37,-0.3,-0.88,0.57,-0.6,-0.57,0.37,-0.3,-0.88,0.71,0,-0.71,0.71,0,-0.71,0.37,-0.3,-0.88,0.37,0.3,-0.88,0.71,0,-0.71,0.37,0.3,-0.88,0.57,0.6,-0.57,0.57,0.6,-0.57,0.37,0.3,-0.88,0.24,0.79,-0.57,0.24,-0.79,-0.57,-0.13,-0.87,-0.49,-0.22,-0.5,-0.84,0.24,-0.79,-0.57,-0.22,-0.5,-0.84,0.37,-0.3,-0.88,0.37,-0.3,-0.88,-0.22,-0.5,-0.84,-0.25,0,-0.97,0.37,-0.3,-0.88,-0.25,0,-0.97,0.37,0.3,-0.88,0.37,0.3,-0.88,-0.25,0,-0.97,-0.22,0.5,-0.84,0.37,0.3,-0.88,-0.22,0.5,-0.84,0.24,0.79,-0.57,0.24,0.79,-0.57,-0.22,0.5,-0.84,-0.13,0.87,-0.49,-0.13,-0.87,-0.49,-0.47,-0.82,-0.33,-0.69,-0.54,-0.49,-0.13,-0.87,-0.49,-0.69,-0.54,-0.49,-0.22,-0.5,-0.84,-0.22,-0.5,-0.84,-0.69,-0.54,-0.49,-0.8,-0.19,-0.57,-0.22,-0.5,-0.84,-0.8,-0.19,-0.57,-0.25,0,-0.97,-0.25,0,-0.97,-0.8,-0.19,-0.57,-0.8,0.19,-0.57,-0.25,0,-0.97,-0.8,0.19,-0.57,-0.22,0.5,-0.84,-0.22,0.5,-0.84,-0.8,0.19,-0.57,-0.69,0.54,-0.49,-0.22,0.5,-0.84,-0.69,0.54,-0.49,-0.13,0.87,-0.49,-0.13,0.87,-0.49,-0.69,0.54,-0.49,-0.47,0.82,-0.33}
    local test128 = {0,0,1,0.38,0,0.92,0,0.38,0.92,0.38,0,0.92,0.71,0,0.71,0.41,0.41,0.82,0.38,0,0.92,0.41,0.41,0.82,0,0.38,0.92,0,0.38,0.92,0.41,0.41,0.82,0,0.71,0.71,0.71,0,0.71,0.92,0,0.38,0.76,0.43,0.49,0.71,0,0.71,0.76,0.43,0.49,0.41,0.41,0.82,0.41,0.41,0.82,0.76,0.43,0.49,0.43,0.76,0.49,0.41,0.41,0.82,0.43,0.76,0.49,0,0.71,0.71,0,0.71,0.71,0.43,0.76,0.49,0,0.92,0.38,0.92,0,0.38,1,0,0,0.92,0.38,0,0.92,0,0.38,0.92,0.38,0,0.76,0.43,0.49,0.76,0.43,0.49,0.92,0.38,0,0.71,0.71,0,0.76,0.43,0.49,0.71,0.71,0,0.43,0.76,0.49,0.43,0.76,0.49,0.71,0.71,0,0.38,0.92,0,0.43,0.76,0.49,0.38,0.92,0,0,0.92,0.38,0,0.92,0.38,0.38,0.92,0,0,1,0,0,0,1,0,0.38,0.92,-0.38,0,0.92,0,0.38,0.92,0,0.71,0.71,-0.41,0.41,0.82,0,0.38,0.92,-0.41,0.41,0.82,-0.38,0,0.92,-0.38,0,0.92,-0.41,0.41,0.82,-0.71,0,0.71,0,0.71,0.71,0,0.92,0.38,-0.43,0.76,0.49,0,0.71,0.71,-0.43,0.76,0.49,-0.41,0.41,0.82,-0.41,0.41,0.82,-0.43,0.76,0.49,-0.76,0.43,0.49,-0.41,0.41,0.82,-0.76,0.43,0.49,-0.71,0,0.71,-0.71,0,0.71,-0.76,0.43,0.49,-0.92,0,0.38,0,0.92,0.38,0,1,0,-0.38,0.92,0,0,0.92,0.38,-0.38,0.92,0,-0.43,0.76,0.49,-0.43,0.76,0.49,-0.38,0.92,0,-0.71,0.71,0,-0.43,0.76,0.49,-0.71,0.71,0,-0.76,0.43,0.49,-0.76,0.43,0.49,-0.71,0.71,0,-0.92,0.38,0,-0.76,0.43,0.49,-0.92,0.38,0,-0.92,0,0.38,-0.92,0,0.38,-0.92,0.38,0,-1,0,0,0,0,1,-0.38,0,0.92,0,-0.38,0.92,-0.38,0,0.92,-0.71,0,0.71,-0.41,-0.41,0.82,-0.38,0,0.92,-0.41,-0.41,0.82,0,-0.38,0.92,0,-0.38,0.92,-0.41,-0.41,0.82,0,-0.71,0.71,-0.71,0,0.71,-0.92,0,0.38,-0.76,-0.43,0.49,-0.71,0,0.71,-0.76,-0.43,0.49,-0.41,-0.41,0.82,-0.41,-0.41,0.82,-0.76,-0.43,0.49,-0.43,-0.76,0.49,-0.41,-0.41,0.82,-0.43,-0.76,0.49,0,-0.71,0.71,0,-0.71,0.71,-0.43,-0.76,0.49,0,-0.92,0.38,-0.92,0,0.38,-1,0,0,-0.92,-0.38,0,-0.92,0,0.38,-0.92,-0.38,0,-0.76,-0.43,0.49,-0.76,-0.43,0.49,-0.92,-0.38,0,-0.71,-0.71,0,-0.76,-0.43,0.49,-0.71,-0.71,0,-0.43,-0.76,0.49,-0.43,-0.76,0.49,-0.71,-0.71,0,-0.38,-0.92,0,-0.43,-0.76,0.49,-0.38,-0.92,0,0,-0.92,0.38,0,-0.92,0.38,-0.38,-0.92,0,0,-1,0,0,0,1,0,-0.38,0.92,0.38,0,0.92,0,-0.38,0.92,0,-0.71,0.71,0.41,-0.41,0.82,0,-0.38,0.92,0.41,-0.41,0.82,0.38,0,0.92,0.38,0,0.92,0.41,-0.41,0.82,0.71,0,0.71,0,-0.71,0.71,0,-0.92,0.38,0.43,-0.76,0.49,0,-0.71,0.71,0.43,-0.76,0.49,0.41,-0.41,0.82,0.41,-0.41,0.82,0.43,-0.76,0.49,0.76,-0.43,0.49,0.41,-0.41,0.82,0.76,-0.43,0.49,0.71,0,0.71,0.71,0,0.71,0.76,-0.43,0.49,0.92,0,0.38,0,-0.92,0.38,0,-1,0,0.38,-0.92,0,0,-0.92,0.38,0.38,-0.92,0,0.43,-0.76,0.49,0.43,-0.76,0.49,0.38,-0.92,0,0.71,-0.71,0,0.43,-0.76,0.49,0.71,-0.71,0,0.76,-0.43,0.49,0.76,-0.43,0.49,0.71,-0.71,0,0.92,-0.38,0,0.76,-0.43,0.49,0.92,-0.38,0,0.92,0,0.38,0.92,0,0.38,0.92,-0.38,0,1,0,0,0,0,-1,0,0.38,-0.92,0.38,0,-0.92,0,0.38,-0.92,0,0.71,-0.71,0.41,0.41,-0.82,0,0.38,-0.92,0.41,0.41,-0.82,0.38,0,-0.92,0.38,0,-0.92,0.41,0.41,-0.82,0.71,0,-0.71,0,0.71,-0.71,0,0.92,-0.38,0.43,0.76,-0.49,0,0.71,-0.71,0.43,0.76,-0.49,0.41,0.41,-0.82,0.41,0.41,-0.82,0.43,0.76,-0.49,0.76,0.43,-0.49,0.41,0.41,-0.82,0.76,0.43,-0.49,0.71,0,-0.71,0.71,0,-0.71,0.76,0.43,-0.49,0.92,0,-0.38,0,0.92,-0.38,0,1,0,0.38,0.92,0,0,0.92,-0.38,0.38,0.92,0,0.43,0.76,-0.49,0.43,0.76,-0.49,0.38,0.92,0,0.71,0.71,0,0.43,0.76,-0.49,0.71,0.71,0,0.76,0.43,-0.49,0.76,0.43,-0.49,0.71,0.71,0,0.92,0.38,0,0.76,0.43,-0.49,0.92,0.38,0,0.92,0,-0.38,0.92,0,-0.38,0.92,0.38,0,1,0,0,0,0,-1,-0.38,0,-0.92,0,0.38,-0.92,-0.38,0,-0.92,-0.71,0,-0.71,-0.41,0.41,-0.82,-0.38,0,-0.92,-0.41,0.41,-0.82,0,0.38,-0.92,0,0.38,-0.92,-0.41,0.41,-0.82,0,0.71,-0.71,-0.71,0,-0.71,-0.92,0,-0.38,-0.76,0.43,-0.49,-0.71,0,-0.71,-0.76,0.43,-0.49,-0.41,0.41,-0.82,-0.41,0.41,-0.82,-0.76,0.43,-0.49,-0.43,0.76,-0.49,-0.41,0.41,-0.82,-0.43,0.76,-0.49,0,0.71,-0.71,0,0.71,-0.71,-0.43,0.76,-0.49,0,0.92,-0.38,-0.92,0,-0.38,-1,0,0,-0.92,0.38,0,-0.92,0,-0.38,-0.92,0.38,0,-0.76,0.43,-0.49,-0.76,0.43,-0.49,-0.92,0.38,0,-0.71,0.71,0,-0.76,0.43,-0.49,-0.71,0.71,0,-0.43,0.76,-0.49,-0.43,0.76,-0.49,-0.71,0.71,0,-0.38,0.92,0,-0.43,0.76,-0.49,-0.38,0.92,0,0,0.92,-0.38,0,0.92,-0.38,-0.38,0.92,0,0,1,0,0,0,-1,0,-0.38,-0.92,-0.38,0,-0.92,0,-0.38,-0.92,0,-0.71,-0.71,-0.41,-0.41,-0.82,0,-0.38,-0.92,-0.41,-0.41,-0.82,-0.38,0,-0.92,-0.38,0,-0.92,-0.41,-0.41,-0.82,-0.71,0,-0.71,0,-0.71,-0.71,0,-0.92,-0.38,-0.43,-0.76,-0.49,0,-0.71,-0.71,-0.43,-0.76,-0.49,-0.41,-0.41,-0.82,-0.41,-0.41,-0.82,-0.43,-0.76,-0.49,-0.76,-0.43,-0.49,-0.41,-0.41,-0.82,-0.76,-0.43,-0.49,-0.71,0,-0.71,-0.71,0,-0.71,-0.76,-0.43,-0.49,-0.92,0,-0.38,0,-0.92,-0.38,0,-1,0,-0.38,-0.92,0,0,-0.92,-0.38,-0.38,-0.92,0,-0.43,-0.76,-0.49,-0.43,-0.76,-0.49,-0.38,-0.92,0,-0.71,-0.71,0,-0.43,-0.76,-0.49,-0.71,-0.71,0,-0.76,-0.43,-0.49,-0.76,-0.43,-0.49,-0.71,-0.71,0,-0.92,-0.38,0,-0.76,-0.43,-0.49,-0.92,-0.38,0,-0.92,0,-0.38,-0.92,0,-0.38,-0.92,-0.38,0,-1,0,0,0,0,-1,0.38,0,-0.92,0,-0.38,-0.92,0.38,0,-0.92,0.71,0,-0.71,0.41,-0.41,-0.82,0.38,0,-0.92,0.41,-0.41,-0.82,0,-0.38,-0.92,0,-0.38,-0.92,0.41,-0.41,-0.82,0,-0.71,-0.71,0.71,0,-0.71,0.92,0,-0.38,0.76,-0.43,-0.49,0.71,0,-0.71,0.76,-0.43,-0.49,0.41,-0.41,-0.82,0.41,-0.41,-0.82,0.76,-0.43,-0.49,0.43,-0.76,-0.49,0.41,-0.41,-0.82,0.43,-0.76,-0.49,0,-0.71,-0.71,0,-0.71,-0.71,0.43,-0.76,-0.49,0,-0.92,-0.38,0.92,0,-0.38,1,0,0,0.92,-0.38,0,0.92,0,-0.38,0.92,-0.38,0,0.76,-0.43,-0.49,0.76,-0.43,-0.49,0.92,-0.38,0,0.71,-0.71,0,0.76,-0.43,-0.49,0.71,-0.71,0,0.43,-0.76,-0.49,0.43,-0.76,-0.49,0.71,-0.71,0,0.38,-0.92,0,0.43,-0.76,-0.49,0.38,-0.92,0,0,-0.92,-0.38,0,-0.92,-0.38,0.38,-0.92,0,0,-1,0}
    --local test180 = [[0 0 1,0.36 0 0.93,0.11 0.34 0.93,0.36 0 0.93,0.67 0 0.74,0.48 0.35 0.81,0.36 0 0.93,0.48 0.35 0.81,0.11 0.34 0.93,0.11 0.34 0.93,0.48 0.35 0.81,0.21 0.64 0.74,0.67 0 0.74,0.89 0 0.45,0.78 0.34 0.52,0.67 0 0.74,0.78 0.34 0.52,0.48 0.35 0.81,0.48 0.35 0.81,0.78 0.34 0.52,0.57 0.64 0.52,0.48 0.35 0.81,0.57 0.64 0.52,0.21 0.64 0.74,0.21 0.64 0.74,0.57 0.64 0.52,0.28 0.85 0.45,0 0 1,0.11 0.34 0.93,-0.29 0.21 0.93,0.11 0.34 0.93,0.21 0.64 0.74,-0.18 0.56 0.81,0.11 0.34 0.93,-0.18 0.56 0.81,-0.29 0.21 0.93,-0.29 0.21 0.93,-0.18 0.56 0.81,-0.54 0.4 0.74,0.21 0.64 0.74,0.28 0.85 0.45,-0.08 0.85 0.52,0.21 0.64 0.74,-0.08 0.85 0.52,-0.18 0.56 0.81,-0.18 0.56 0.81,-0.08 0.85 0.52,-0.43 0.74 0.52,-0.18 0.56 0.81,-0.43 0.74 0.52,-0.54 0.4 0.74,-0.54 0.4 0.74,-0.43 0.74 0.52,-0.72 0.53 0.45,0 0 1,-0.29 0.21 0.93,-0.29 -0.21 0.93,-0.29 0.21 0.93,-0.54 0.4 0.74,-0.59 0 0.81,-0.29 0.21 0.93,-0.59 0 0.81,-0.29 -0.21 0.93,-0.29 -0.21 0.93,-0.59 0 0.81,-0.54 -0.4 0.74,-0.54 0.4 0.74,-0.72 0.53 0.45,-0.84 0.18 0.52,-0.54 0.4 0.74,-0.84 0.18 0.52,-0.59 0 0.81,-0.59 0 0.81,-0.84 0.18 0.52,-0.84 -0.18 0.52,-0.59 0 0.81,-0.84 -0.18 0.52,-0.54 -0.4 0.74,-0.54 -0.4 0.74,-0.84 -0.18 0.52,-0.72 -0.53 0.45,0 0 1,-0.29 -0.21 0.93,0.11 -0.34 0.93,-0.29 -0.21 0.93,-0.54 -0.4 0.74,-0.18 -0.56 0.81,-0.29 -0.21 0.93,-0.18 -0.56 0.81,0.11 -0.34 0.93,0.11 -0.34 0.93,-0.18 -0.56 0.81,0.21 -0.64 0.74,-0.54 -0.4 0.74,-0.72 -0.53 0.45,-0.43 -0.74 0.52,-0.54 -0.4 0.74,-0.43 -0.74 0.52,-0.18 -0.56 0.81,-0.18 -0.56 0.81,-0.43 -0.74 0.52,-0.08 -0.85 0.52,-0.18 -0.56 0.81,-0.08 -0.85 0.52,0.21 -0.64 0.74,0.21 -0.64 0.74,-0.08 -0.85 0.52,0.28 -0.85 0.45,0 0 1,0.11 -0.34 0.93,0.36 0 0.93,0.11 -0.34 0.93,0.21 -0.64 0.74,0.48 -0.35 0.81,0.11 -0.34 0.93,0.48 -0.35 0.81,0.36 0 0.93,0.36 0 0.93,0.48 -0.35 0.81,0.67 0 0.74,0.21 -0.64 0.74,0.28 -0.85 0.45,0.57 -0.64 0.52,0.21 -0.64 0.74,0.57 -0.64 0.52,0.48 -0.35 0.81,0.48 -0.35 0.81,0.57 -0.64 0.52,0.78 -0.34 0.52,0.48 -0.35 0.81,0.78 -0.34 0.52,0.67 0 0.74,0.67 0 0.74,0.78 -0.34 0.52,0.89 0 0.45,0.89 0 0.45,0.96 -0.21 0.16,0.96 0.21 0.16,0.96 -0.21 0.16,0.91 -0.4 -0.16,0.99 0 -0.17,0.96 -0.21 0.16,0.99 0 -0.17,0.96 0.21 0.16,0.96 0.21 0.16,0.99 0 -0.17,0.91 0.4 -0.16,0.91 -0.4 -0.16,0.72 -0.53 -0.45,0.84 -0.18 -0.52,0.91 -0.4 -0.16,0.84 -0.18 -0.52,0.99 0 -0.17,0.99 0 -0.17,0.84 -0.18 -0.52,0.84 0.18 -0.52,0.99 0 -0.17,0.84 0.18 -0.52,0.91 0.4 -0.16,0.91 0.4 -0.16,0.84 0.18 -0.52,0.72 0.53 -0.45,0.28 0.85 0.45,0.5 0.85 0.16,0.1 0.98 0.16,0.5 0.85 0.16,0.66 0.74 -0.16,0.3 0.94 -0.17,0.5 0.85 0.16,0.3 0.94 -0.17,0.1 0.98 0.16,0.1 0.98 0.16,0.3 0.94 -0.17,-0.1 0.98 -0.16,0.66 0.74 -0.16,0.72 0.53 -0.45,0.43 0.74 -0.52,0.66 0.74 -0.16,0.43 0.74 -0.52,0.3 0.94 -0.17,0.3 0.94 -0.17,0.43 0.74 -0.52,0.08 0.85 -0.52,0.3 0.94 -0.17,0.08 0.85 -0.52,-0.1 0.98 -0.16,-0.1 0.98 -0.16,0.08 0.85 -0.52,-0.28 0.85 -0.45,-0.72 0.53 0.45,-0.66 0.74 0.16,-0.91 0.4 0.16,-0.66 0.74 0.16,-0.5 0.85 -0.16,-0.8 0.58 -0.17,-0.66 0.74 0.16,-0.8 0.58 -0.17,-0.91 0.4 0.16,-0.91 0.4 0.16,-0.8 0.58 -0.17,-0.96 0.21 -0.16,-0.5 0.85 -0.16,-0.28 0.85 -0.45,-0.57 0.64 -0.52,-0.5 0.85 -0.16,-0.57 0.64 -0.52,-0.8 0.58 -0.17,-0.8 0.58 -0.17,-0.57 0.64 -0.52,-0.78 0.34 -0.52,-0.8 0.58 -0.17,-0.78 0.34 -0.52,-0.96 0.21 -0.16,-0.96 0.21 -0.16,-0.78 0.34 -0.52,-0.89 0 -0.45,-0.72 -0.53 0.45,-0.91 -0.4 0.16,-0.66 -0.74 0.16,-0.91 -0.4 0.16,-0.96 -0.21 -0.16,-0.8 -0.58 -0.17,-0.91 -0.4 0.16,-0.8 -0.58 -0.17,-0.66 -0.74 0.16,-0.66 -0.74 0.16,-0.8 -0.58 -0.17,-0.5 -0.85 -0.16,-0.96 -0.21 -0.16,-0.89 0 -0.45,-0.78 -0.34 -0.52,-0.96 -0.21 -0.16,-0.78 -0.34 -0.52,-0.8 -0.58 -0.17,-0.8 -0.58 -0.17,-0.78 -0.34 -0.52,-0.57 -0.64 -0.52,-0.8 -0.58 -0.17,-0.57 -0.64 -0.52,-0.5 -0.85 -0.16,-0.5 -0.85 -0.16,-0.57 -0.64 -0.52,-0.28 -0.85 -0.45,0.28 -0.85 0.45,0.1 -0.98 0.16,0.5 -0.85 0.16,0.1 -0.98 0.16,-0.1 -0.98 -0.16,0.3 -0.94 -0.17,0.1 -0.98 0.16,0.3 -0.94 -0.17,0.5 -0.85 0.16,0.5 -0.85 0.16,0.3 -0.94 -0.17,0.66 -0.74 -0.16,-0.1 -0.98 -0.16,-0.28 -0.85 -0.45,0.08 -0.85 -0.52,-0.1 -0.98 -0.16,0.08 -0.85 -0.52,0.3 -0.94 -0.17,0.3 -0.94 -0.17,0.08 -0.85 -0.52,0.43 -0.74 -0.52,0.3 -0.94 -0.17,0.43 -0.74 -0.52,0.66 -0.74 -0.16,0.66 -0.74 -0.16,0.43 -0.74 -0.52,0.72 -0.53 -0.45,0.72 0.53 -0.45,0.66 0.74 -0.16,0.91 0.4 -0.16,0.66 0.74 -0.16,0.5 0.85 0.16,0.8 0.58 0.17,0.66 0.74 -0.16,0.8 0.58 0.17,0.91 0.4 -0.16,0.91 0.4 -0.16,0.8 0.58 0.17,0.96 0.21 0.16,0.5 0.85 0.16,0.28 0.85 0.45,0.57 0.64 0.52,0.5 0.85 0.16,0.57 0.64 0.52,0.8 0.58 0.17,0.8 0.58 0.17,0.57 0.64 0.52,0.78 0.34 0.52,0.8 0.58 0.17,0.78 0.34 0.52,0.96 0.21 0.16,0.96 0.21 0.16,0.78 0.34 0.52,0.89 0 0.45,-0.28 0.85 -0.45,-0.5 0.85 -0.16,-0.1 0.98 -0.16,-0.5 0.85 -0.16,-0.66 0.74 0.16,-0.3 0.94 0.17,-0.5 0.85 -0.16,-0.3 0.94 0.17,-0.1 0.98 -0.16,-0.1 0.98 -0.16,-0.3 0.94 0.17,0.1 0.98 0.16,-0.66 0.74 0.16,-0.72 0.53 0.45,-0.43 0.74 0.52,-0.66 0.74 0.16,-0.43 0.74 0.52,-0.3 0.94 0.17,-0.3 0.94 0.17,-0.43 0.74 0.52,-0.08 0.85 0.52,-0.3 0.94 0.17,-0.08 0.85 0.52,0.1 0.98 0.16,0.1 0.98 0.16,-0.08 0.85 0.52,0.28 0.85 0.45,-0.89 0 -0.45,-0.96 -0.21 -0.16,-0.96 0.21 -0.16,-0.96 -0.21 -0.16,-0.91 -0.4 0.16,-0.99 0 0.17,-0.96 -0.21 -0.16,-0.99 0 0.17,-0.96 0.21 -0.16,-0.96 0.21 -0.16,-0.99 0 0.17,-0.91 0.4 0.16,-0.91 -0.4 0.16,-0.72 -0.53 0.45,-0.84 -0.18 0.52,-0.91 -0.4 0.16,-0.84 -0.18 0.52,-0.99 0 0.17,-0.99 0 0.17,-0.84 -0.18 0.52,-0.84 0.18 0.52,-0.99 0 0.17,-0.84 0.18 0.52,-0.91 0.4 0.16,-0.91 0.4 0.16,-0.84 0.18 0.52,-0.72 0.53 0.45,-0.28 -0.85 -0.45,-0.1 -0.98 -0.16,-0.5 -0.85 -0.16,-0.1 -0.98 -0.16,0.1 -0.98 0.16,-0.3 -0.94 0.17,-0.1 -0.98 -0.16,-0.3 -0.94 0.17,-0.5 -0.85 -0.16,-0.5 -0.85 -0.16,-0.3 -0.94 0.17,-0.66 -0.74 0.16,0.1 -0.98 0.16,0.28 -0.85 0.45,-0.08 -0.85 0.52,0.1 -0.98 0.16,-0.08 -0.85 0.52,-0.3 -0.94 0.17,-0.3 -0.94 0.17,-0.08 -0.85 0.52,-0.43 -0.74 0.52,-0.3 -0.94 0.17,-0.43 -0.74 0.52,-0.66 -0.74 0.16,-0.66 -0.74 0.16,-0.43 -0.74 0.52,-0.72 -0.53 0.45,0.72 -0.53 -0.45,0.91 -0.4 -0.16,0.66 -0.74 -0.16,0.91 -0.4 -0.16,0.96 -0.21 0.16,0.8 -0.58 0.17,0.91 -0.4 -0.16,0.8 -0.58 0.17,0.66 -0.74 -0.16,0.66 -0.74 -0.16,0.8 -0.58 0.17,0.5 -0.85 0.16,0.96 -0.21 0.16,0.89 0 0.45,0.78 -0.34 0.52,0.96 -0.21 0.16,0.78 -0.34 0.52,0.8 -0.58 0.17,0.8 -0.58 0.17,0.78 -0.34 0.52,0.57 -0.64 0.52,0.8 -0.58 0.17,0.57 -0.64 0.52,0.5 -0.85 0.16,0.5 -0.85 0.16,0.57 -0.64 0.52,0.28 -0.85 0.45,0 0 -1,-0.11 0.34 -0.93,0.29 0.21 -0.93,-0.11 0.34 -0.93,-0.21 0.64 -0.74,0.18 0.56 -0.81,-0.11 0.34 -0.93,0.18 0.56 -0.81,0.29 0.21 -0.93,0.29 0.21 -0.93,0.18 0.56 -0.81,0.54 0.4 -0.74,-0.21 0.64 -0.74,-0.28 0.85 -0.45,0.08 0.85 -0.52,-0.21 0.64 -0.74,0.08 0.85 -0.52,0.18 0.56 -0.81,0.18 0.56 -0.81,0.08 0.85 -0.52,0.43 0.74 -0.52,0.18 0.56 -0.81,0.43 0.74 -0.52,0.54 0.4 -0.74,0.54 0.4 -0.74,0.43 0.74 -0.52,0.72 0.53 -0.45,0 0 -1,-0.36 0 -0.93,-0.11 0.34 -0.93,-0.36 0 -0.93,-0.67 0 -0.74,-0.48 0.35 -0.81,-0.36 0 -0.93,-0.48 0.35 -0.81,-0.11 0.34 -0.93,-0.11 0.34 -0.93,-0.48 0.35 -0.81,-0.21 0.64 -0.74,-0.67 0 -0.74,-0.89 0 -0.45,-0.78 0.34 -0.52,-0.67 0 -0.74,-0.78 0.34 -0.52,-0.48 0.35 -0.81,-0.48 0.35 -0.81,-0.78 0.34 -0.52,-0.57 0.64 -0.52,-0.48 0.35 -0.81,-0.57 0.64 -0.52,-0.21 0.64 -0.74,-0.21 0.64 -0.74,-0.57 0.64 -0.52,-0.28 0.85 -0.45,0 0 -1,-0.11 -0.34 -0.93,-0.36 0 -0.93,-0.11 -0.34 -0.93,-0.21 -0.64 -0.74,-0.48 -0.35 -0.81,-0.11 -0.34 -0.93,-0.48 -0.35 -0.81,-0.36 0 -0.93,-0.36 0 -0.93,-0.48 -0.35 -0.81,-0.67 0 -0.74,-0.21 -0.64 -0.74,-0.28 -0.85 -0.45,-0.57 -0.64 -0.52,-0.21 -0.64 -0.74,-0.57 -0.64 -0.52,-0.48 -0.35 -0.81,-0.48 -0.35 -0.81,-0.57 -0.64 -0.52,-0.78 -0.34 -0.52,-0.48 -0.35 -0.81,-0.78 -0.34 -0.52,-0.67 0 -0.74,-0.67 0 -0.74,-0.78 -0.34 -0.52,-0.89 0 -0.45,0 0 -1,0.29 -0.21 -0.93,-0.11 -0.34 -0.93,0.29 -0.21 -0.93,0.54 -0.4 -0.74,0.18 -0.56 -0.81,0.29 -0.21 -0.93,0.18 -0.56 -0.81,-0.11 -0.34 -0.93,-0.11 -0.34 -0.93,0.18 -0.56 -0.81,-0.21 -0.64 -0.74,0.54 -0.4 -0.74,0.72 -0.53 -0.45,0.43 -0.74 -0.52,0.54 -0.4 -0.74,0.43 -0.74 -0.52,0.18 -0.56 -0.81,0.18 -0.56 -0.81,0.43 -0.74 -0.52,0.08 -0.85 -0.52,0.18 -0.56 -0.81,0.08 -0.85 -0.52,-0.21 -0.64 -0.74,-0.21 -0.64 -0.74,0.08 -0.85 -0.52,-0.28 -0.85 -0.45,0 0 -1,0.29 0.21 -0.93,0.29 -0.21 -0.93,0.29 0.21 -0.93,0.54 0.4 -0.74,0.59 0 -0.81,0.29 0.21 -0.93,0.59 0 -0.81,0.29 -0.21 -0.93,0.29 -0.21 -0.93,0.59 0 -0.81,0.54 -0.4 -0.74,0.54 0.4 -0.74,0.72 0.53 -0.45,0.84 0.18 -0.52,0.54 0.4 -0.74,0.84 0.18 -0.52,0.59 0 -0.81,0.59 0 -0.81,0.84 0.18 -0.52,0.84 -0.18 -0.52,0.59 0 -0.81,0.84 -0.18 -0.52,0.54 -0.4 -0.74,0.54 -0.4 -0.74,0.84 -0.18 -0.52,0.72 -0.53 -0.45]]
    --local testMesh = [[0 0 1,0.71 0 0.71,0 0.71 0.71,0.71 0 0.71,1 0 0,0.71 0.71 0,0.71 0 0.71,0.71 0.71 0,0 0.71 0.71,0 0.71 0.71,0.71 0.71 0,0 1 0,0 0 1,0 0.71 0.71,-0.71 0 0.71,0 0.71 0.71,0 1 0,-0.71 0.71 0,0 0.71 0.71,-0.71 0.71 0,-0.71 0 0.71,-0.71 0 0.71,-0.71 0.71 0,-1 0 0,0 0 1,-0.71 0 0.71,0 -0.71 0.71,-0.71 0 0.71,-1 0 0,-0.71 -0.71 0,-0.71 0 0.71,-0.71 -0.71 0,0 -0.71 0.71,0 -0.71 0.71,-0.71 -0.71 0,0 -1 0,0 0 1,0 -0.71 0.71,0.71 0 0.71,0 -0.71 0.71,0 -1 0,0.71 -0.71 0,0 -0.71 0.71,0.71 -0.71 0,0.71 0 0.71,0.71 0 0.71,0.71 -0.71 0,1 0 0,0 0 -1,0 0.71 -0.71,0.71 0 -0.71,0 0.71 -0.71,0 1 0,0.71 0.71 0,0 0.71 -0.71,0.71 0.71 0,0.71 0 -0.71,0.71 0 -0.71,0.71 0.71 0,1 0 0,0 0 -1,-0.71 0 -0.71,0 0.71 -0.71,-0.71 0 -0.71,-1 0 0,-0.71 0.71 0,-0.71 0 -0.71,-0.71 0.71 0,0 0.71 -0.71,0 0.71 -0.71,-0.71 0.71 0,0 1 0,0 0 -1,0 -0.71 -0.71,-0.71 0 -0.71,0 -0.71 -0.71,0 -1 0,-0.71 -0.71 0,0 -0.71 -0.71,-0.71 -0.71 0,-0.71 0 -0.71,-0.71 0 -0.71,-0.71 -0.71 0,-1 0 0,0 0 -1,0.71 0 -0.71,0 -0.71 -0.71,0.71 0 -0.71,1 0 0,0.71 -0.71 0,0.71 0 -0.71,0.71 -0.71 0,0 -0.71 -0.71,0 -0.71 -0.71,0.71 -0.71 0,0 -1 0]]
    local mesh = this.ObjectFromS3D(test80)
    --mesh.Scale = mesh.Scale * 2.15
    --mesh.Position = vec3(0,0,1)
    local herk = mesh
    herk.Name = "Mesh Wrapper"
    herk.Position = vec3(0,10,0)
    --herk.LookAt(rightAxis:normalize())
    herk.Update = function(deltaTime)
        herk.RotateAround(vec3(0,0,1), deltaTime * 90)
    end

    --this.AddObject(herk)

    this.Update = function(event, dt)
        --system.print("Starting pass")
        Calls = {
            Render = 0,
            ScreenPos = 0,
            GetModel = 0
        }
        renderCount = 1
        local deltaTime = system.getTime() - lastTime
        -- TODO: Actually set it to player position based on interact
        -- TODO: Manage interactivity through lib
        --local plr = vec3(Horizon.Controller.getMasterPlayerWorldPosition())
        -- camera.UpdateView(plr, vec3(Horizon.Controller.getMasterPlayerWorldForward()), vec3(Horizon.Controller.getMasterPlayerWorldUp()))
        --camera.UpdateView(vec3(0,0,0), vec3(0,1,0), vec3(0,0,1))
        --sortObjects()

        local buffer = {[[<svg viewBox="0 0 ]]..camera.Resolution.x..[[ ]]..camera.Resolution.y..[[">]]}
        for i=1,#this.Objects do
            local obj = this.Objects[i]
            obj.Update(deltaTime)
            buffer[i+1] = obj.Render(camera, deltaTime)
        end
        layer.Content = table.concat(buffer) .. [[</svg>]]
        lastTime = system.getTime()

        -- system.print("Passes this frame: "..renderCount)
        -- system.print("Calls:")
        -- system.print("ScreenPosition: " .. Calls.ScreenPos)
        -- system.print("GetModel: " .. Calls.GetModel)
        -- system.print("Render: " .. Calls.Render)

    end

    system.print("AR Scene init")
    return this
end)()